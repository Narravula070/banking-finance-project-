pipeline {
  agent any

  tools {
    maven 'M2_HOME'
    terraform 'terraform'
  }

  environment {
     AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_KEY')
  }

  stages {
    stage('Package the Application') {
      steps {
        echo "Packaging the Application"
        sh 'mvn clean package'
      }
    }

    stage('Publish Reports using HTML') {
      steps {
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '/var/lib/jenkins/workspace/bank-pro/target/surefire-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
      }
    }

    stage('Docker Image Creation') {
      steps {
        sh 'docker build -t kranthi619/insure-me:latest .'
      }
    }

    stage('Docker Login') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'Docker-Hub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
          sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
        }
      }
    }

    stage('Set Terraform Environment') {
      steps {
        sh 'export AWS_PROFILE=ilab'
      }
    }

    stage('Get Directory') {
      steps {
        println(WORKSPACE)
      }
    }

    stage('Terraform init') {
      steps {
        sh 'cd /var/lib/jenkins/workspace/bank-pro/test-server && terraform init'
      }
    }
    
    stage('Terraform Apply') {
      steps {
        withCredentials([
          [
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'AWS_ACCESS_KEY_ID',
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          ], 
          [
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'AWS_SECRET_KEY',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
          ]
        ]) {
          sh 'terraform apply --auto-approve'
        }
      }
    }
  }
}


